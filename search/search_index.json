{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SQLModelService","text":"<p><code>SQLModelService</code> is a generic service layer on top of SQLModel for conveniently creating APIs with frameworks like FastAPI.</p>"},{"location":"#installation","title":"Installation","text":"<p>The library is available on PyPI and can be installed with:</p> <pre><code>$ pip install sqlmodelservice\n</code></pre>"},{"location":"#dependencies","title":"Dependencies","text":"<p>The only direct dependency of the project -- as the name suggests -- is <code>SQLModel</code>.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome.</p>"},{"location":"#license","title":"License","text":"<p>The library is open-sourced under the conditions of the MIT license.</p>"},{"location":"api-errors/","title":"Errors","text":""},{"location":"api-errors/#sqlmodelservice.errors.CommitFailed","title":"<code>CommitFailed</code>","text":"<p>             Bases: <code>ServiceException</code></p> <p>Raise by the service when a commit fails.</p> Source code in <code>sqlmodelservice/errors.py</code> <pre><code>class CommitFailed(ServiceException):\n    \"\"\"Raise by the service when a commit fails.\"\"\"\n\n    ...\n</code></pre>"},{"location":"api-errors/#sqlmodelservice.errors.MultipleResultsFound","title":"<code>MultipleResultsFound</code>","text":"<p>             Bases: <code>ServiceException</code></p> <p>Raised by the service when multiple results were found but at most one was expected.</p> Source code in <code>sqlmodelservice/errors.py</code> <pre><code>class MultipleResultsFound(ServiceException):\n    \"\"\"Raised by the service when multiple results were found but at most one was expected.\"\"\"\n\n    ...\n</code></pre>"},{"location":"api-errors/#sqlmodelservice.errors.NotFound","title":"<code>NotFound</code>","text":"<p>             Bases: <code>ServiceException</code></p> <p>Raise by the service when an item is not found.</p> Source code in <code>sqlmodelservice/errors.py</code> <pre><code>class NotFound(ServiceException):\n    \"\"\"Raise by the service when an item is not found.\"\"\"\n\n    ...\n</code></pre>"},{"location":"api-errors/#sqlmodelservice.errors.ServiceException","title":"<code>ServiceException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Base exception raise by services.</p> Source code in <code>sqlmodelservice/errors.py</code> <pre><code>class ServiceException(Exception):\n    \"\"\"Base exception raise by services.\"\"\"\n\n    ...\n</code></pre>"},{"location":"api-service/","title":"<code>Service</code>","text":"<p>             Bases: <code>Generic[TModel, TCreate, TUpdate, TPrimaryKey]</code></p> <p>Base service implementation.</p> <p>It's a wrapper <code>sqlmodel</code>'s <code>Session</code>. When using the service, use the practices that are recommended in <code>sqlmodel</code>'s documentation. For example don't reuse the same service instance across multiple requests.</p> <p>Generic types: - <code>TModel</code>: The SQLModel class on which <code>table=True</code> is set. - <code>TCreate</code>: The instance creation model. It may be the same as <code>TModel</code>, although it is   usually different. The <code>TCreate</code> -&gt; <code>TModel</code> conversion happens in <code>_prepare_for_create()</code>,   which you may override. - <code>TUpdate</code>: The instance update model. It may be the same as <code>TModel</code>, although it is   usually different. The <code>TUpdate</code> -&gt; <code>dict</code> conversion for update operation happens in   <code>_prepare_for_update()</code>, which you may override. - <code>TPrimaryKey</code>: The type definition of the primary key of <code>TModel</code>. Often simply <code>int</code> or   <code>str</code>, or <code>tuple</code> for complex keys.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>class Service(Generic[TModel, TCreate, TUpdate, TPrimaryKey]):\n    \"\"\"\n    Base service implementation.\n\n    It's a wrapper `sqlmodel`'s `Session`. When using the service, use the practices\n    that are recommended in `sqlmodel`'s [documentation](https://sqlmodel.tiangolo.com/).\n    For example don't reuse the same service instance across multiple requests.\n\n    Generic types:\n    - `TModel`: The SQLModel class on which `table=True` is set.\n    - `TCreate`: The instance creation model. It may be the same as `TModel`, although it is\n      usually different. The `TCreate` -&gt; `TModel` conversion happens in `_prepare_for_create()`,\n      which you may override.\n    - `TUpdate`: The instance update model. It may be the same as `TModel`, although it is\n      usually different. The `TUpdate` -&gt; `dict` conversion for update operation happens in\n      `_prepare_for_update()`, which you may override.\n    - `TPrimaryKey`: The type definition of the primary key of `TModel`. Often simply `int` or\n      `str`, or `tuple` for complex keys.\n    \"\"\"\n\n    __slots__ = (\n        \"_model\",\n        \"_session\",\n    )\n\n    def __init__(self, session: Session, *, model: Type[TModel]) -&gt; None:\n        \"\"\"\n        Initialization.\n\n        Arguments:\n            session: The session instance the service will use. When the service is created,\n                it becomes the sole owner of the session, it should only be used through the\n                service from then on.\n            model: The database *table* model.\n        \"\"\"\n        self._model = model\n        self._session = session\n\n    @overload\n    def add_to_session(\n        self, items: Iterable[TCreate], *, commit: bool = False, operation: Literal[\"create\"]\n    ) -&gt; list[TModel]:\n        ...\n\n    @overload\n    def add_to_session(\n        self, items: Iterable[tuple[TModel, TUpdate]], *, commit: bool = False, operation: Literal[\"update\"]\n    ) -&gt; list[TModel]:\n        ...\n\n    def add_to_session(\n        self,\n        items: Iterable[TCreate] | Iterable[tuple[TModel, TUpdate]],\n        *,\n        commit: bool = False,\n        operation: Literal[\"create\", \"update\"],\n    ) -&gt; list[TModel]:\n        \"\"\"\n        Adds all items to the session using the same flow as `create()` or `update()`,\n        depending on the selected `operation`.\n\n        If `commit` is `True`, the method will commit the transaction even if `items` is empty.\n        The reason for this is to allow chaining `add_to_session()` calls without special\n        attention to when and how the session must be committed at the end.\n\n        Note: even if `commit` is `True`, the method *will not perform a refresh* on the items\n        as it has to be done one by one which would be very inefficient with many items.\n\n        Arguments:\n            items: The items to add to the session.\n            commit: Whether to also commit the changes to the database.\n            operation: The desired operation.\n\n        Returns:\n            The list of items that were added to the session.\n\n        Raises:\n            CommitFailed: If the service fails to commit the operation.\n        \"\"\"\n        if operation == \"create\":\n            items = cast(Iterable[TCreate], items)\n            db_items = [self._prepare_for_create(item) for item in items]\n        elif operation == \"update\":\n            items = cast(Iterable[tuple[TModel, TUpdate]], items)\n            db_items = [self._apply_changes_to_item(item, changes) for item, changes in items]\n        else:\n            raise ServiceException(f\"Unsupported operation: {operation}\")\n\n        self._session.add_all(db_items)\n        if commit:\n            self._safe_commit(\"Commit failed.\")\n\n        return db_items\n\n    def all(\n        self,\n        where: ColumnElement[bool] | bool | None = None,\n        *,\n        order_by: Sequence[ColumnElement[Any]] | None = None,\n        limit: int | None = None,\n        offset: int | None = None,\n    ) -&gt; Sequence[TModel]:\n        \"\"\"\n        Returns all items that match the given where clause.\n\n        Arguments:\n            where: An optional where clause for the query.\n            order_by: An optional sequence of order by clauses.\n            limit: An optional limit for the number of items to return.\n            offset: The number of items to skip.\n        \"\"\"\n        stmt = self.select()\n\n        if where is not None:\n            stmt = stmt.where(where)\n\n        if order_by is not None:\n            stmt = stmt.order_by(*order_by)\n\n        if limit is not None:\n            stmt = stmt.limit(limit)\n\n        if offset is not None:\n            stmt = stmt.offset(offset)\n\n        return self.exec(stmt).all()\n\n    def create(self, data: TCreate) -&gt; TModel:\n        \"\"\"\n        Creates a new database entry from the given data.\n\n        Arguments:\n            data: Creation data.\n\n        Raises:\n            CommitFailed: If the service fails to commit the operation.\n        \"\"\"\n        session = self._session\n        db_item = self._prepare_for_create(data)\n        session.add(db_item)\n        self._safe_commit(\"Commit failed.\")\n        session.refresh(db_item)\n        return db_item\n\n    def delete_by_pk(self, pk: TPrimaryKey) -&gt; None:\n        \"\"\"\n        Deletes the item with the given primary key from the database.\n\n        Arguments:\n            pk: The primary key.\n\n        Raises:\n            CommitFailed: If the service fails to commit the operation.\n            NotFound: If the document with the given primary key does not exist.\n        \"\"\"\n        session = self._session\n\n        item = self.get_by_pk(pk)\n        if item is None:\n            raise NotFound(self._format_primary_key(pk))\n\n        session.delete(item)\n        self._safe_commit(\"Failed to delete item.\")\n\n    @overload\n    def exec(self, statement: Select[T]) -&gt; TupleResult[T]:\n        ...\n\n    @overload\n    def exec(self, statement: SelectOfScalar[T]) -&gt; ScalarResult[T]:\n        ...\n\n    def exec(self, statement: SelectOfScalar[T] | Select[T]) -&gt; ScalarResult[T] | TupleResult[T]:\n        \"\"\"\n        Executes the given statement.\n        \"\"\"\n        return self._session.exec(statement)\n\n    def get_all(self) -&gt; Sequence[TModel]:\n        \"\"\"\n        Returns all items from the database.\n\n        Deprecated. Use `all()` instead.\n        \"\"\"\n        return self._session.exec(select(self._model)).all()\n\n    def get_by_pk(self, pk: PrimaryKey) -&gt; TModel | None:\n        \"\"\"\n        Returns the item with the given primary key if it exists.\n\n        Arguments:\n            pk: The primary key.\n        \"\"\"\n        return self._session.get(self._model, pk)\n\n    def one(\n        self,\n        where: ColumnElement[bool] | bool,\n    ) -&gt; TModel:\n        \"\"\"\n        Returns item that matches the given where clause.\n\n        Arguments:\n            where: The where clause of the query.\n\n        Raises:\n            MultipleResultsFound: If multiple items match the where clause.\n            NotFound: If no items match the where clause.\n        \"\"\"\n        try:\n            return self.exec(self.select().where(where)).one()\n        except sa_exc.MultipleResultsFound as e:\n            raise MultipleResultsFound(\"Multiple items matched the where clause.\") from e\n        except sa_exc.NoResultFound as e:\n            raise NotFound(\"No items matched the where clause\") from e\n\n    def one_or_none(\n        self,\n        where: ColumnElement[bool] | bool,\n    ) -&gt; TModel | None:\n        \"\"\"\n        Returns item that matches the given where clause, if there is such an item.\n\n        Arguments:\n            where: The where clause of the query.\n\n        Raises:\n            MultipleResultsFound: If multiple items match the where clause.\n        \"\"\"\n        try:\n            return self.exec(self.select().where(where)).one_or_none()\n        except sa_exc.MultipleResultsFound as e:\n            raise MultipleResultsFound(\"Multiple items matched the where clause.\") from e\n\n    def refresh(self, instance: TModel) -&gt; None:\n        \"\"\"\n        Refreshes the given instance from the database.\n        \"\"\"\n        self._session.refresh(instance)\n\n    @overload\n    def select(self) -&gt; SelectOfScalar[TModel]:\n        ...\n\n    @overload\n    def select(self, joined_1: Type[TM_1], /) -&gt; SelectOfScalar[tuple[TModel, TM_1]]:\n        ...\n\n    @overload\n    def select(self, joined_1: Type[TM_1], joined_2: Type[TM_2], /) -&gt; SelectOfScalar[tuple[TModel, TM_1, TM_2]]:\n        ...\n\n    @overload\n    def select(\n        self, joined_1: Type[TM_1], joined_2: Type[TM_2], joined_3: Type[TM_3], /\n    ) -&gt; SelectOfScalar[tuple[TModel, TM_1, TM_2, TM_3]]:\n        ...\n\n    @overload\n    def select(\n        self,\n        joined_1: Type[TM_1],\n        joined_2: Type[TM_2],\n        joined_3: Type[TM_3],\n        joined_4: Type[TM_4],\n        /,\n    ) -&gt; SelectOfScalar[tuple[TModel, TM_1, TM_2, TM_3, TM_4]]:\n        ...\n\n    @overload\n    def select(\n        self,\n        joined_1: Type[TM_1],\n        joined_2: Type[TM_2],\n        joined_3: Type[TM_3],\n        joined_4: Type[TM_4],\n        joined_5: Type[TM_5],\n        /,\n    ) -&gt; SelectOfScalar[tuple[TModel, TM_1, TM_2, TM_3, TM_4, TM_5]]:\n        ...\n\n    @overload\n    def select(\n        self,\n        joined_1: Type[TM_1],\n        joined_2: Type[TM_2],\n        joined_3: Type[TM_3],\n        joined_4: Type[TM_4],\n        joined_5: Type[TM_5],\n        joined_6: Type[TM_6],\n        /,\n    ) -&gt; SelectOfScalar[tuple[TModel, TM_1, TM_2, TM_3, TM_4, TM_5, TM_6]]:\n        ...\n\n    def select(self, *joined: SQLModel) -&gt; SelectOfScalar[SQLModel]:  # type: ignore[misc]\n        \"\"\"\n        Creates a select statement on the service's table.\n\n        Positional arguments (SQLModel table definitions) will be included in the select statement.\n        You must specify the join condition for each included positional argument though.\n\n        If `joined` is not empty, then a tuple will be returned with `len(joined) + 1` values\n        in it. The first value will be an instance of `TModel`, the rest of the values will\n        correspond to the positional arguments that were passed to the method.\n\n        Example:\n\n        ```python\n        class A(SQLModel, table=True):\n            id: int | None = Field(primary_key=True)\n            a: str\n\n        class B(SQLModel, table=True):\n            id: int | None = Field(primary_key=True)\n            b: str\n\n        class AService(Service[A, A, A, int]):\n            def __init__(self, session: Session) -&gt; None:\n                super().__init__(session, model=A)\n\n        with Session(engine) as session:\n            a_svc = AService(session)\n            q = a_svc.select(B).where(A.a == B.b)\n            result = svc.exec(q).one()\n            print(result[0])  # A instance\n            print(result[1])  # B instance\n        ```\n        \"\"\"\n        return select(self._model, *joined)\n\n    def update(self, pk: TPrimaryKey, data: TUpdate) -&gt; TModel:\n        \"\"\"\n        Updates the item with the given primary key.\n\n        Arguments:\n            pk: The primary key.\n            data: Update data.\n\n        Raises:\n            CommitFailed: If the service fails to commit the operation.\n            NotFound: If the record with the given primary key does not exist.\n        \"\"\"\n        item = self.get_by_pk(pk)\n        if item is None:\n            raise NotFound(self._format_primary_key(pk))\n\n        return self.update_item(item, data)\n\n    def update_item(self, item: TModel, data: TUpdate) -&gt; TModel:\n        \"\"\"\n        Updates the given item.\n\n        The same as `update()` but without data fetching.\n\n        Arguments:\n            item: The item to update.\n            data: Update data.\n\n        Raises:\n            CommitFailed: If the service fails to commit the operation.\n            NotFound: If the record with the given primary key does not exist.\n        \"\"\"\n        session = self._session\n        self._apply_changes_to_item(item, data)\n        session.add(item)\n        self._safe_commit(\"Update failed.\")\n\n        session.refresh(item)\n        return item\n\n    def _apply_changes_to_item(self, item: TModel, data: TUpdate) -&gt; TModel:\n        \"\"\"\n        Applies the given changes to the given item without committing anything.\n\n        Arguments:\n            item: The item to update.\n            data: The changes to make to `item`.\n\n        Returns:\n            The received item.\n        \"\"\"\n        changes = self._prepare_for_update(data)\n        for key, value in changes.items():\n            setattr(item, key, value)\n\n        return item\n\n    def _format_primary_key(self, pk: TPrimaryKey) -&gt; str:\n        \"\"\"\n        Returns the string-formatted version of the primary key.\n\n        Arguments:\n            pk: The primary key to format.\n\n        Raises:\n            ValueError: If formatting fails.\n        \"\"\"\n        if isinstance(pk, (str, int)):\n            return str(pk)\n        elif isinstance(pk, (tuple, list)):\n            return \"|\".join(str(i) for i in pk)\n        elif isinstance(pk, dict):\n            return \"|\".join(f\"{k}:{v}\" for k, v in pk.items())\n\n        raise ValueError(\"Unrecognized primary key type.\")\n\n    def _prepare_for_create(self, data: TCreate) -&gt; TModel:\n        \"\"\"\n        Hook that is called before applying creating a model.\n\n        The methods role is to convert certain attributes of the given model's before creating it.\n\n        Arguments:\n            data: The model to be created.\n        \"\"\"\n        return self._model.model_validate(data)\n\n    def _prepare_for_update(self, data: TUpdate) -&gt; dict[str, Any]:\n        \"\"\"\n        Hook that is called before applying the given update.\n\n        The method's role is to convert the given data into a `dict` of\n        attribute name - new value pairs, omitting unchanged values.\n\n        The default implementation is `data.model_dump(exclude_unset=True)`.\n\n        Arguments:\n            data: The update data.\n        \"\"\"\n        return data.model_dump(exclude_unset=True)\n\n    def _safe_commit(self, error_msg: str) -&gt; None:\n        \"\"\"\n        Commits the session, making sure it is rolled back in case the commit fails.\n\n        Arguments:\n            error_msg: The message for the raised exception.\n\n        Raises:\n            CommitFailed: If committing the session failed.\n        \"\"\"\n        safe_commit(self._session, error_msg=error_msg)\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.__init__","title":"<code>__init__(session, *, model)</code>","text":"<p>Initialization.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The session instance the service will use. When the service is created, it becomes the sole owner of the session, it should only be used through the service from then on.</p> required <code>model</code> <code>Type[TModel]</code> <p>The database table model.</p> required Source code in <code>sqlmodelservice/service.py</code> <pre><code>def __init__(self, session: Session, *, model: Type[TModel]) -&gt; None:\n    \"\"\"\n    Initialization.\n\n    Arguments:\n        session: The session instance the service will use. When the service is created,\n            it becomes the sole owner of the session, it should only be used through the\n            service from then on.\n        model: The database *table* model.\n    \"\"\"\n    self._model = model\n    self._session = session\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service._apply_changes_to_item","title":"<code>_apply_changes_to_item(item, data)</code>","text":"<p>Applies the given changes to the given item without committing anything.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>TModel</code> <p>The item to update.</p> required <code>data</code> <code>TUpdate</code> <p>The changes to make to <code>item</code>.</p> required <p>Returns:</p> Type Description <code>TModel</code> <p>The received item.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def _apply_changes_to_item(self, item: TModel, data: TUpdate) -&gt; TModel:\n    \"\"\"\n    Applies the given changes to the given item without committing anything.\n\n    Arguments:\n        item: The item to update.\n        data: The changes to make to `item`.\n\n    Returns:\n        The received item.\n    \"\"\"\n    changes = self._prepare_for_update(data)\n    for key, value in changes.items():\n        setattr(item, key, value)\n\n    return item\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service._format_primary_key","title":"<code>_format_primary_key(pk)</code>","text":"<p>Returns the string-formatted version of the primary key.</p> <p>Parameters:</p> Name Type Description Default <code>pk</code> <code>TPrimaryKey</code> <p>The primary key to format.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If formatting fails.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def _format_primary_key(self, pk: TPrimaryKey) -&gt; str:\n    \"\"\"\n    Returns the string-formatted version of the primary key.\n\n    Arguments:\n        pk: The primary key to format.\n\n    Raises:\n        ValueError: If formatting fails.\n    \"\"\"\n    if isinstance(pk, (str, int)):\n        return str(pk)\n    elif isinstance(pk, (tuple, list)):\n        return \"|\".join(str(i) for i in pk)\n    elif isinstance(pk, dict):\n        return \"|\".join(f\"{k}:{v}\" for k, v in pk.items())\n\n    raise ValueError(\"Unrecognized primary key type.\")\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service._prepare_for_create","title":"<code>_prepare_for_create(data)</code>","text":"<p>Hook that is called before applying creating a model.</p> <p>The methods role is to convert certain attributes of the given model's before creating it.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>TCreate</code> <p>The model to be created.</p> required Source code in <code>sqlmodelservice/service.py</code> <pre><code>def _prepare_for_create(self, data: TCreate) -&gt; TModel:\n    \"\"\"\n    Hook that is called before applying creating a model.\n\n    The methods role is to convert certain attributes of the given model's before creating it.\n\n    Arguments:\n        data: The model to be created.\n    \"\"\"\n    return self._model.model_validate(data)\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service._prepare_for_update","title":"<code>_prepare_for_update(data)</code>","text":"<p>Hook that is called before applying the given update.</p> <p>The method's role is to convert the given data into a <code>dict</code> of attribute name - new value pairs, omitting unchanged values.</p> <p>The default implementation is <code>data.model_dump(exclude_unset=True)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>TUpdate</code> <p>The update data.</p> required Source code in <code>sqlmodelservice/service.py</code> <pre><code>def _prepare_for_update(self, data: TUpdate) -&gt; dict[str, Any]:\n    \"\"\"\n    Hook that is called before applying the given update.\n\n    The method's role is to convert the given data into a `dict` of\n    attribute name - new value pairs, omitting unchanged values.\n\n    The default implementation is `data.model_dump(exclude_unset=True)`.\n\n    Arguments:\n        data: The update data.\n    \"\"\"\n    return data.model_dump(exclude_unset=True)\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service._safe_commit","title":"<code>_safe_commit(error_msg)</code>","text":"<p>Commits the session, making sure it is rolled back in case the commit fails.</p> <p>Parameters:</p> Name Type Description Default <code>error_msg</code> <code>str</code> <p>The message for the raised exception.</p> required <p>Raises:</p> Type Description <code>CommitFailed</code> <p>If committing the session failed.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def _safe_commit(self, error_msg: str) -&gt; None:\n    \"\"\"\n    Commits the session, making sure it is rolled back in case the commit fails.\n\n    Arguments:\n        error_msg: The message for the raised exception.\n\n    Raises:\n        CommitFailed: If committing the session failed.\n    \"\"\"\n    safe_commit(self._session, error_msg=error_msg)\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.add_to_session","title":"<code>add_to_session(items, *, commit=False, operation)</code>","text":"<p>Adds all items to the session using the same flow as <code>create()</code> or <code>update()</code>, depending on the selected <code>operation</code>.</p> <p>If <code>commit</code> is <code>True</code>, the method will commit the transaction even if <code>items</code> is empty. The reason for this is to allow chaining <code>add_to_session()</code> calls without special attention to when and how the session must be committed at the end.</p> <p>Note: even if <code>commit</code> is <code>True</code>, the method will not perform a refresh on the items as it has to be done one by one which would be very inefficient with many items.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>Iterable[TCreate] | Iterable[tuple[TModel, TUpdate]]</code> <p>The items to add to the session.</p> required <code>commit</code> <code>bool</code> <p>Whether to also commit the changes to the database.</p> <code>False</code> <code>operation</code> <code>Literal['create', 'update']</code> <p>The desired operation.</p> required <p>Returns:</p> Type Description <code>list[TModel]</code> <p>The list of items that were added to the session.</p> <p>Raises:</p> Type Description <code>CommitFailed</code> <p>If the service fails to commit the operation.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def add_to_session(\n    self,\n    items: Iterable[TCreate] | Iterable[tuple[TModel, TUpdate]],\n    *,\n    commit: bool = False,\n    operation: Literal[\"create\", \"update\"],\n) -&gt; list[TModel]:\n    \"\"\"\n    Adds all items to the session using the same flow as `create()` or `update()`,\n    depending on the selected `operation`.\n\n    If `commit` is `True`, the method will commit the transaction even if `items` is empty.\n    The reason for this is to allow chaining `add_to_session()` calls without special\n    attention to when and how the session must be committed at the end.\n\n    Note: even if `commit` is `True`, the method *will not perform a refresh* on the items\n    as it has to be done one by one which would be very inefficient with many items.\n\n    Arguments:\n        items: The items to add to the session.\n        commit: Whether to also commit the changes to the database.\n        operation: The desired operation.\n\n    Returns:\n        The list of items that were added to the session.\n\n    Raises:\n        CommitFailed: If the service fails to commit the operation.\n    \"\"\"\n    if operation == \"create\":\n        items = cast(Iterable[TCreate], items)\n        db_items = [self._prepare_for_create(item) for item in items]\n    elif operation == \"update\":\n        items = cast(Iterable[tuple[TModel, TUpdate]], items)\n        db_items = [self._apply_changes_to_item(item, changes) for item, changes in items]\n    else:\n        raise ServiceException(f\"Unsupported operation: {operation}\")\n\n    self._session.add_all(db_items)\n    if commit:\n        self._safe_commit(\"Commit failed.\")\n\n    return db_items\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.create","title":"<code>create(data)</code>","text":"<p>Creates a new database entry from the given data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>TCreate</code> <p>Creation data.</p> required <p>Raises:</p> Type Description <code>CommitFailed</code> <p>If the service fails to commit the operation.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def create(self, data: TCreate) -&gt; TModel:\n    \"\"\"\n    Creates a new database entry from the given data.\n\n    Arguments:\n        data: Creation data.\n\n    Raises:\n        CommitFailed: If the service fails to commit the operation.\n    \"\"\"\n    session = self._session\n    db_item = self._prepare_for_create(data)\n    session.add(db_item)\n    self._safe_commit(\"Commit failed.\")\n    session.refresh(db_item)\n    return db_item\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.delete_by_pk","title":"<code>delete_by_pk(pk)</code>","text":"<p>Deletes the item with the given primary key from the database.</p> <p>Parameters:</p> Name Type Description Default <code>pk</code> <code>TPrimaryKey</code> <p>The primary key.</p> required <p>Raises:</p> Type Description <code>CommitFailed</code> <p>If the service fails to commit the operation.</p> <code>NotFound</code> <p>If the document with the given primary key does not exist.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def delete_by_pk(self, pk: TPrimaryKey) -&gt; None:\n    \"\"\"\n    Deletes the item with the given primary key from the database.\n\n    Arguments:\n        pk: The primary key.\n\n    Raises:\n        CommitFailed: If the service fails to commit the operation.\n        NotFound: If the document with the given primary key does not exist.\n    \"\"\"\n    session = self._session\n\n    item = self.get_by_pk(pk)\n    if item is None:\n        raise NotFound(self._format_primary_key(pk))\n\n    session.delete(item)\n    self._safe_commit(\"Failed to delete item.\")\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.exec","title":"<code>exec(statement)</code>","text":"<p>Executes the given statement.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def exec(self, statement: SelectOfScalar[T] | Select[T]) -&gt; ScalarResult[T] | TupleResult[T]:\n    \"\"\"\n    Executes the given statement.\n    \"\"\"\n    return self._session.exec(statement)\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.get_all","title":"<code>get_all()</code>","text":"<p>Returns all items from the database.</p> <p>Deprecated. Use <code>all()</code> instead.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def get_all(self) -&gt; Sequence[TModel]:\n    \"\"\"\n    Returns all items from the database.\n\n    Deprecated. Use `all()` instead.\n    \"\"\"\n    return self._session.exec(select(self._model)).all()\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.get_by_pk","title":"<code>get_by_pk(pk)</code>","text":"<p>Returns the item with the given primary key if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>pk</code> <code>PrimaryKey</code> <p>The primary key.</p> required Source code in <code>sqlmodelservice/service.py</code> <pre><code>def get_by_pk(self, pk: PrimaryKey) -&gt; TModel | None:\n    \"\"\"\n    Returns the item with the given primary key if it exists.\n\n    Arguments:\n        pk: The primary key.\n    \"\"\"\n    return self._session.get(self._model, pk)\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.one","title":"<code>one(where)</code>","text":"<p>Returns item that matches the given where clause.</p> <p>Parameters:</p> Name Type Description Default <code>where</code> <code>ColumnElement[bool] | bool</code> <p>The where clause of the query.</p> required <p>Raises:</p> Type Description <code>MultipleResultsFound</code> <p>If multiple items match the where clause.</p> <code>NotFound</code> <p>If no items match the where clause.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def one(\n    self,\n    where: ColumnElement[bool] | bool,\n) -&gt; TModel:\n    \"\"\"\n    Returns item that matches the given where clause.\n\n    Arguments:\n        where: The where clause of the query.\n\n    Raises:\n        MultipleResultsFound: If multiple items match the where clause.\n        NotFound: If no items match the where clause.\n    \"\"\"\n    try:\n        return self.exec(self.select().where(where)).one()\n    except sa_exc.MultipleResultsFound as e:\n        raise MultipleResultsFound(\"Multiple items matched the where clause.\") from e\n    except sa_exc.NoResultFound as e:\n        raise NotFound(\"No items matched the where clause\") from e\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.one_or_none","title":"<code>one_or_none(where)</code>","text":"<p>Returns item that matches the given where clause, if there is such an item.</p> <p>Parameters:</p> Name Type Description Default <code>where</code> <code>ColumnElement[bool] | bool</code> <p>The where clause of the query.</p> required <p>Raises:</p> Type Description <code>MultipleResultsFound</code> <p>If multiple items match the where clause.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def one_or_none(\n    self,\n    where: ColumnElement[bool] | bool,\n) -&gt; TModel | None:\n    \"\"\"\n    Returns item that matches the given where clause, if there is such an item.\n\n    Arguments:\n        where: The where clause of the query.\n\n    Raises:\n        MultipleResultsFound: If multiple items match the where clause.\n    \"\"\"\n    try:\n        return self.exec(self.select().where(where)).one_or_none()\n    except sa_exc.MultipleResultsFound as e:\n        raise MultipleResultsFound(\"Multiple items matched the where clause.\") from e\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.refresh","title":"<code>refresh(instance)</code>","text":"<p>Refreshes the given instance from the database.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def refresh(self, instance: TModel) -&gt; None:\n    \"\"\"\n    Refreshes the given instance from the database.\n    \"\"\"\n    self._session.refresh(instance)\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.select","title":"<code>select(*joined)</code>","text":"<p>Creates a select statement on the service's table.</p> <p>Positional arguments (SQLModel table definitions) will be included in the select statement. You must specify the join condition for each included positional argument though.</p> <p>If <code>joined</code> is not empty, then a tuple will be returned with <code>len(joined) + 1</code> values in it. The first value will be an instance of <code>TModel</code>, the rest of the values will correspond to the positional arguments that were passed to the method.</p> <p>Example:</p> <pre><code>class A(SQLModel, table=True):\n    id: int | None = Field(primary_key=True)\n    a: str\n\nclass B(SQLModel, table=True):\n    id: int | None = Field(primary_key=True)\n    b: str\n\nclass AService(Service[A, A, A, int]):\n    def __init__(self, session: Session) -&gt; None:\n        super().__init__(session, model=A)\n\nwith Session(engine) as session:\n    a_svc = AService(session)\n    q = a_svc.select(B).where(A.a == B.b)\n    result = svc.exec(q).one()\n    print(result[0])  # A instance\n    print(result[1])  # B instance\n</code></pre> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def select(self, *joined: SQLModel) -&gt; SelectOfScalar[SQLModel]:  # type: ignore[misc]\n    \"\"\"\n    Creates a select statement on the service's table.\n\n    Positional arguments (SQLModel table definitions) will be included in the select statement.\n    You must specify the join condition for each included positional argument though.\n\n    If `joined` is not empty, then a tuple will be returned with `len(joined) + 1` values\n    in it. The first value will be an instance of `TModel`, the rest of the values will\n    correspond to the positional arguments that were passed to the method.\n\n    Example:\n\n    ```python\n    class A(SQLModel, table=True):\n        id: int | None = Field(primary_key=True)\n        a: str\n\n    class B(SQLModel, table=True):\n        id: int | None = Field(primary_key=True)\n        b: str\n\n    class AService(Service[A, A, A, int]):\n        def __init__(self, session: Session) -&gt; None:\n            super().__init__(session, model=A)\n\n    with Session(engine) as session:\n        a_svc = AService(session)\n        q = a_svc.select(B).where(A.a == B.b)\n        result = svc.exec(q).one()\n        print(result[0])  # A instance\n        print(result[1])  # B instance\n    ```\n    \"\"\"\n    return select(self._model, *joined)\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.update","title":"<code>update(pk, data)</code>","text":"<p>Updates the item with the given primary key.</p> <p>Parameters:</p> Name Type Description Default <code>pk</code> <code>TPrimaryKey</code> <p>The primary key.</p> required <code>data</code> <code>TUpdate</code> <p>Update data.</p> required <p>Raises:</p> Type Description <code>CommitFailed</code> <p>If the service fails to commit the operation.</p> <code>NotFound</code> <p>If the record with the given primary key does not exist.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def update(self, pk: TPrimaryKey, data: TUpdate) -&gt; TModel:\n    \"\"\"\n    Updates the item with the given primary key.\n\n    Arguments:\n        pk: The primary key.\n        data: Update data.\n\n    Raises:\n        CommitFailed: If the service fails to commit the operation.\n        NotFound: If the record with the given primary key does not exist.\n    \"\"\"\n    item = self.get_by_pk(pk)\n    if item is None:\n        raise NotFound(self._format_primary_key(pk))\n\n    return self.update_item(item, data)\n</code></pre>"},{"location":"api-service/#sqlmodelservice.Service.update_item","title":"<code>update_item(item, data)</code>","text":"<p>Updates the given item.</p> <p>The same as <code>update()</code> but without data fetching.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>TModel</code> <p>The item to update.</p> required <code>data</code> <code>TUpdate</code> <p>Update data.</p> required <p>Raises:</p> Type Description <code>CommitFailed</code> <p>If the service fails to commit the operation.</p> <code>NotFound</code> <p>If the record with the given primary key does not exist.</p> Source code in <code>sqlmodelservice/service.py</code> <pre><code>def update_item(self, item: TModel, data: TUpdate) -&gt; TModel:\n    \"\"\"\n    Updates the given item.\n\n    The same as `update()` but without data fetching.\n\n    Arguments:\n        item: The item to update.\n        data: Update data.\n\n    Raises:\n        CommitFailed: If the service fails to commit the operation.\n        NotFound: If the record with the given primary key does not exist.\n    \"\"\"\n    session = self._session\n    self._apply_changes_to_item(item, data)\n    session.add(item)\n    self._safe_commit(\"Update failed.\")\n\n    session.refresh(item)\n    return item\n</code></pre>"},{"location":"api-utils/","title":"Utils","text":""},{"location":"api-utils/#sqlmodelservice.utils.safe_commit","title":"<code>safe_commit(session, *, error_msg)</code>","text":"<p>Commits the session, making sure it is rolled back in case the commit fails.</p> <p>Parameters:</p> Name Type Description Default <code>error_msg</code> <code>str</code> <p>The message for the raised exception.</p> required <p>Raises:</p> Type Description <code>CommitFailed</code> <p>If committing the session failed.</p> Source code in <code>sqlmodelservice/utils.py</code> <pre><code>def safe_commit(session: \"Session\", *, error_msg: str) -&gt; None:\n    \"\"\"\n    Commits the session, making sure it is rolled back in case the commit fails.\n\n    Arguments:\n        error_msg: The message for the raised exception.\n\n    Raises:\n        CommitFailed: If committing the session failed.\n    \"\"\"\n    try:\n        session.commit()\n    except Exception as e:\n        session.rollback()\n        raise CommitFailed(error_msg) from e\n</code></pre>"},{"location":"fastapi-example/","title":"FastAPI example","text":""},{"location":"fastapi-example/#prerequisites","title":"Prerequisites","text":"<p>To follow and try this example, you will need:</p> <ul> <li>Python 3.10+;</li> <li><code>fastapi</code> and <code>uvicorn</code> (<code>pip install fastapi uvicorn</code>);</li> <li>and of course this library.</li> </ul> <p>The example will use (and automatically create) an on-disk <code>sqlite</code> database for you to work with. There is no need to set up anything in this regard.</p>"},{"location":"fastapi-example/#project-layout","title":"Project layout","text":"<p>Create the root directory of your project, for example <code>player-app</code>.</p> <p>Inside the root directory, create the root Python package for the application -- <code>player_app</code> -- and add the following empty files to it:</p> <ul> <li><code>__init__.py</code></li> <li><code>api.py</code></li> <li><code>database.py</code></li> <li><code>main.py</code></li> <li><code>model.py</code></li> <li><code>service.py</code></li> </ul> <p>In the end, your directory structure should look like this:</p> <ul> <li><code>player-app</code> (root directory)</li> <ul> <li><code>player_app</code> (root package)</li> <ul> <li><code>__init__.py</code></li> <li><code>api.py</code></li> <li><code>database.py</code></li> <li><code>main.py</code></li> <li><code>model.py</code></li> <li><code>service.py</code></li> </ul> </ul> </ul>"},{"location":"fastapi-example/#database-access-databasepy","title":"Database access (<code>database.py</code>)","text":"<p>We will start by creating some utilities for communicating with the database:</p> <pre><code>from functools import lru_cache\nfrom typing import Annotated\n\nfrom fastapi import Depends\nfrom sqlalchemy.engine import Engine\nfrom sqlmodel import Session, SQLModel, create_engine\n\n\n@lru_cache(maxsize=1)\ndef get_engine() -&gt; Engine:\n    \"\"\"FastAPI dependency that returns the database engine for the application.\"\"\"\n    return create_engine(\"sqlite:///example.db\")\n\n\nDependsEngine = Annotated[Engine, Depends(get_engine)]\n\n\ndef get_session(engine: DependsEngine) -&gt; Session:\n    \"\"\"FastAPI dependency that returns the database session for the application.\"\"\"\n    with Session(engine) as session:\n        yield session\n\n\nDependsSession = Annotated[Session, Depends(get_session)]\n\n\ndef create_tables(engine: Engine) -&gt; None:\n    \"\"\"Creates all tables known by SQLModel in the database if they don't exist.\"\"\"\n    SQLModel.metadata.create_all(engine)\n</code></pre>"},{"location":"fastapi-example/#model-definitions-modelpy","title":"Model definitions (<code>model.py</code>)","text":"<p>We can now define all the models that are required for the application:</p> <pre><code>from sqlmodel import Field, SQLModel\n\n\nclass PlayerBase(SQLModel):\n    \"\"\"Base player model with common properties.\"\"\"\n\n    name: str\n\n\nclass DbPlayer(PlayerBase, table=True):\n    \"\"\"Player database table model.\"\"\"\n\n    __tablename__ = \"players\"\n\n    id: int | None = Field(default=None, primary_key=True)\n\n\nclass PlayerCreate(PlayerBase):\n    \"\"\"\n    Player creation model.\n\n    It doesn't have the `id` property as we want the database to automatically assign it.\n    \"\"\"\n\n    ...\n\n\nclass PlayerRead(PlayerBase):\n    \"\"\"Player read model with a mandatory `id`.\"\"\"\n\n    id: int\n\n\nclass PlayerUpdate(SQLModel):\n    \"\"\"Player update model with optional properties for everything that could be updated.\"\"\"\n\n    name: str | None = None\n</code></pre>"},{"location":"fastapi-example/#services-servicepy","title":"Services (<code>service.py</code>)","text":"<p>With the player model in place, we can create the corresponding service by simply subclassing <code>sqlmodelservice.Service</code>:</p> <pre><code>from sqlmodel import Session\nfrom sqlmodelservice import Service as Service\n\nfrom .model import DbPlayer, PlayerCreate, PlayerUpdate\n\n\nclass PlayerService(Service[DbPlayer, PlayerCreate, PlayerUpdate, int]):\n    \"\"\"\n    Player service.\n\n    Generics:\n\n    - Table model: `DbPlayer`.\n    - Data creation model: `PlayerCreate`.\n    - Update model: `PlayerUpdate`.\n    - Primary key: `int`.\n    \"\"\"\n\n    def __init__(self, session: Session) -&gt; None:\n        \"\"\"\n        Initialization.\n\n        Arguments:\n            session: The database session the service can use.\n        \"\"\"\n        # Always initialize the service with the DbPlayer table model.\n        super().__init__(session, model=DbPlayer)\n</code></pre>"},{"location":"fastapi-example/#routing-apipy","title":"Routing (<code>api.py</code>)","text":"<p>With the data model and the service ready, we can move on creating the player API:</p> <pre><code>from collections.abc import Iterable\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlmodelservice import CommitFailed, NotFound\n\nfrom .database import DependsSession\nfrom .model import DbPlayer, PlayerCreate, PlayerRead, PlayerUpdate\nfrom .service import PlayerService\n\n\nplayer_api = APIRouter()\n\n\ndef get_service(session: DependsSession) -&gt; PlayerService:\n    \"\"\"FastAPI dependency that returns a `PlayerService` instance.\"\"\"\n    return PlayerService(session)\n\n\nDependsService = Annotated[PlayerService, Depends(get_service)]\n\n\n@player_api.get(\"/\", response_model=list[PlayerRead])\ndef get_all(service: DependsService, name: str | None = None) -&gt; Iterable[DbPlayer]:\n    \"\"\"Get all route with optional name filtering to showcase query building using service.select().\"\"\"\n    if name is None:\n        return service.get_all()\n\n    return service.exec(service.select().where(DbPlayer.name == name)).all()\n\n\n@player_api.post(\"/\", response_model=PlayerRead)\ndef create(player: PlayerCreate, service: DependsService) -&gt; DbPlayer:\n    \"\"\"Player creation route.\"\"\"\n    return service.create(player)\n\n\n@player_api.get(\"/{id}\", response_model=PlayerRead)\ndef get_by_id(id: int, service: DependsService) -&gt; DbPlayer:\n    \"\"\"Route for fetching a specific player from the database by its primary key.\"\"\"\n    player = service.get_by_pk(id)\n    if player is None:\n        raise HTTPException(404)\n\n    return player\n\n\n@player_api.put(\"/{id}\", response_model=PlayerRead)\ndef update(id: int, data: PlayerUpdate, service: DependsService) -&gt; DbPlayer:\n    \"\"\"Player update route.\"\"\"\n    try:\n        return service.update(id, data)\n    except NotFound as e:\n        raise HTTPException(404) from e\n\n\n@player_api.delete(\"/{id}\", response_model=None, status_code=204)\ndef delete(id: int, service: DependsService) -&gt; None:\n    \"\"\"Delete route.\"\"\"\n    try:\n        service.delete_by_pk(id)\n    except NotFound as e:\n        raise HTTPException(404) from e\n    except CommitFailed as e:\n        raise HTTPException(400) from e\n</code></pre>"},{"location":"fastapi-example/#the-application-mainpy","title":"The application (<code>main.py</code>)","text":"<p>We are now ready to create and configure the FastAPI application instance:</p> <pre><code>from fastapi import FastAPI\n\nfrom .api import player_api\nfrom .database import create_tables, get_engine\n\n# Create all known database tables so the app has something to work with.\ncreate_tables(get_engine())\n\n# Create the FastAPI application.\napp = FastAPI()\n\n# Add the player API router to the application under the /player prefix.\napp.include_router(player_api, prefix=\"/player\")\n</code></pre>"},{"location":"fastapi-example/#starting-the-application","title":"Starting the application","text":"<p>With everything ready, we can start the application by executing <code>uvicorn player_app.main:app --reload</code> in the root directory and go to http://127.0.0.1:8000/docs to try the created REST API.</p>"}]}