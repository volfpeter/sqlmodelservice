[project]
name = "sqlmodelservice"
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Intended Audience :: Information Technology",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Development Status :: 4 - Beta",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Topic :: Database",
    "Topic :: Internet :: WWW/HTTP",
]

[project.urls]
Homepage = "https://github.com/volfpeter/sqlmodelservice"
Documentation = "https://volfpeter.github.io/sqlmodelservice"

[tool.poetry]
name = "sqlmodelservice"
version = "0.5.0"
description = "A generic service layer on top of SQLModel for conveniently creating APIs with frameworks like FastAPI."
authors = ["Peter Volf <do.volfp@gmail.com>"]
readme = "README.md"
packages = [{include = "sqlmodelservice"}]

[tool.poetry.dependencies]
python = "^3.10"
sqlmodel = ">=0.0.14,<0.1"

[tool.poetry.group.dev.dependencies]
mkdocs-material = "^9.5.6"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
mypy = "^1.8.0"
poethepoet = "^0.24.4"
ruff = "^0.2.0"
pytest = "^8.0.0"
pytest-docker = "^3.1.1"
pytest-random-order = "^1.1.1"
psycopg2 = "^2.9.9"
types-psycopg2 = "^2.9.21.20240201"

[tool.mypy]
strict = true
show_error_codes = true

[tool.ruff]
line-length = 118
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "dist",
    "docs",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "S",  # flake8-bandit - we must ignore these rules in tests
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101"]  # S101: use of assert detected

[tool.poe.tasks]
serve-docs = "mkdocs serve"
check-format = "ruff format --check ."
lint = "ruff check ."
mypy = "mypy ."
format = "ruff format ."
lint-fix = "ruff . --fix"
test = "python -m pytest tests --random-order"

static-checks.sequence = ["lint", "check-format", "mypy"]
static-checks.ignore_fail = "return_non_zero"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
